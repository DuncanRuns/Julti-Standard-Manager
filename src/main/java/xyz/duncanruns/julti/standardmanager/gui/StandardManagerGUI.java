package xyz.duncanruns.julti.standardmanager.gui;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import xyz.duncanruns.julti.Julti;
import xyz.duncanruns.julti.JultiOptions;
import xyz.duncanruns.julti.gui.JultiGUI;
import xyz.duncanruns.julti.instance.MinecraftInstance;
import xyz.duncanruns.julti.management.InstanceManager;
import xyz.duncanruns.julti.standardmanager.SSFile;
import xyz.duncanruns.julti.standardmanager.StandardManagerInit;
import xyz.duncanruns.julti.util.DoAllFastUtil;
import xyz.duncanruns.julti.util.FileUtil;

import javax.swing.*;
import java.awt.*;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;
import java.util.Objects;
import java.util.stream.Stream;

import static xyz.duncanruns.julti.standardmanager.StandardManagerConstants.STANDARD_MANAGER_PATH;

public class StandardManagerGUI extends JFrame {
    private boolean closed = false;
    private JPanel mainPanel;
    private JPanel fileSelectPanel;
    private JComboBox<SSFile> fileSelectBox;
    private JButton newButton;
    private JButton deleteButton;
    private JButton applyButton;
    private JPanel bottomPanel;
    private JButton editFileManuallyButton;
    private JButton reloadFileButton;
    private JPanel editPanel;

    private SSFile currentSSFile;

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        this.$$$setupUI$$$();
    }

    public StandardManagerGUI() {
        this.setTitle("Julti Standard Manager");
        this.setContentPane(this.mainPanel);
        this.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                StandardManagerGUI.this.close();
            }
        });
        try {
            this.initSSFile();
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
        this.populateSelectorBox();
        this.setLocation(JultiGUI.getPluginsGUI().getLocation());
        this.addListeners();
        this.setSize(650, 400);
        if (this.currentSSFile == null) {
            this.dispose();
            this.close();
        } else {
            this.setVisible(true);
        }
    }

    private void populateSelectorBox() {
        try (Stream<Path> paths = Files.list(STANDARD_MANAGER_PATH)) {
            paths.forEach(path -> {
                SSFile ssFile = new SSFile(path);
                if (Objects.equals(this.currentSSFile, ssFile)) {
                    return;
                }
                this.fileSelectBox.addItem(ssFile);
                if (this.currentSSFile == null) {
                    this.setSelectedFile(ssFile);
                }
            });
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    private void setSelectedFile(SSFile ssFile) {
        if (Objects.equals(this.currentSSFile, ssFile)) {
            return;
        }
        this.fileSelectBox.setSelectedItem(ssFile);
        this.currentSSFile = ssFile;
        this.reloadSelectedFile(true);
    }

    private void reloadSelectedFile(boolean validateOptions) {
        boolean alreadyAppliedToInstances = this.currentSSFile.isAppliedToAllInstances();
        this.applyButton.setEnabled(!alreadyAppliedToInstances);
        this.applyButton.setText(alreadyAppliedToInstances ? "Already Applied to Instances" : "Apply to All Instances");

        boolean inManagerFolder = this.currentSSFile.isInManagerFolder();
        this.deleteButton.setEnabled(inManagerFolder);
        this.deleteButton.setToolTipText(inManagerFolder ? null : "This file is not managed by the Standard Manager and cannot be deleted.");

        this.editPanel.removeAll();
        GridBagConstraints gbc = new GridBagConstraints(0, 0, 1, 1, 0, 0, GridBagConstraints.WEST, GridBagConstraints.HORIZONTAL, new Insets(0, 0, 0, 0), 0, 0);
        List<SSFile.EditableOption> editableOptions = this.currentSSFile.getEditableOptions();
        for (SSFile.EditableOption editableOption : editableOptions) {
            JButton button = new JButton(editableOption.name + ": " + editableOption.get());
            button.addActionListener(a -> this.onEditPress(editableOption));
            this.editPanel.add(button, gbc);
            if (++gbc.gridy >= editableOptions.size() / 2) {
                gbc.gridy = 0;
                gbc.gridx++;
            }
        }
        this.revalidate();

        if (validateOptions && !this.currentSSFile.hasRequiredJultiOptions()) {
            if (JOptionPane.showConfirmDialog(this, "Some required options for Julti are missing. Fix required options?", "Julti Standard Manager: Fix Required Options", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE) == 0) {
                this.currentSSFile.fixRequiredForJulti();
                this.reloadSelectedFile(true);
            }
        }
    }

    private void onEditPress(SSFile.EditableOption editableOption) {
        Object out = "";
        boolean alreadyAsked = false;
        while (true) {
            out = JOptionPane.showInputDialog(this, (alreadyAsked ? "Invalid value! " : "") + "Enter a new value for " + editableOption.name + ":", "Julti Standard Manager: Edit Option", alreadyAsked ? JOptionPane.ERROR_MESSAGE : JOptionPane.PLAIN_MESSAGE, null, null, editableOption.get());
            alreadyAsked = true;
            if (out == null) {
                return;
            }
            if (editableOption.set(out.toString())) {
                this.reloadSelectedFile(false);
                Julti.doLater(() -> DoAllFastUtil.doAllFast(MinecraftInstance::discoverInformation));
                return;
            }
        }
    }

    private void initSSFile() throws IOException {
        List<MinecraftInstance> instances = InstanceManager.getInstanceManager().getInstances();
        assert !instances.isEmpty();

        MinecraftInstance instance = instances.get(0);
        Path optionsPath = instance.getPath().resolve("options.txt");
        String regularOptionsContents = null;
        if (Files.exists(optionsPath)) {
            regularOptionsContents = FileUtil.readString(optionsPath.toAbsolutePath()).trim();
        }
        Path ssPath = instance.getPath().resolve("config").resolve("standardoptions.txt").toAbsolutePath();
        Path pathInsideInstance = ssPath;
        while (true) {
            if (!Files.exists(ssPath)) {
                // Create file with original options if it doesn't exist
                if (regularOptionsContents == null) {
                    return;
                }
                FileUtil.writeString(ssPath, regularOptionsContents);
                break;
            }

            String contents = FileUtil.readString(ssPath).trim();
            if (SSFile.isValidPath(contents)) {
                ssPath = Paths.get(contents).toAbsolutePath();
            } else {
                break;
            }
        }
        if (pathInsideInstance.equals(ssPath)) {
            if (JOptionPane.showConfirmDialog(
                    this,
                    "Instance \"" + instance + "\" is not connected to any global file. Create new global standard file?",
                    "Julti Standard Manager: No Global File Found",
                    JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE
            ) == 0) {
                this.pressNewButton(new SSFile(ssPath).load());
            }
        } else {
            SSFile ssFile = new SSFile(ssPath).load();
            this.fileSelectBox.addItem(ssFile);
            this.setSelectedFile(ssFile);
        }
    }

    private void addListeners() {
        this.newButton.addActionListener(e -> this.pressNewButton());
        this.deleteButton.addActionListener(e -> this.pressDeleteButton());
        this.fileSelectBox.addActionListener(e -> this.onSelectorChange());
        this.editFileManuallyButton.addActionListener(e -> this.pressEditManuallyButton());
        this.reloadFileButton.addActionListener(e -> this.pressReloadFileButton());
        this.applyButton.addActionListener(e -> this.pressApplyButton());
    }

    private void pressApplyButton() {
        this.currentSSFile.applyToAllInstances();
        this.reloadSelectedFile(false);
    }

    private void pressReloadFileButton() {
        this.currentSSFile.load();
        this.reloadSelectedFile(false);
    }

    private void pressEditManuallyButton() {
        this.currentSSFile.editManually();
        this.dispose();
        this.close();
    }

    private void onSelectorChange() {
        if (Objects.equals(this.fileSelectBox.getSelectedItem(), this.currentSSFile)) {
            return;
        }
        this.setSelectedFile(((SSFile) this.fileSelectBox.getSelectedItem()).load());
    }

    private void pressDeleteButton() {
        if (JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this file?", "Julti Standard Manager: Delete File", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE) != 0) {
            return;
        }
        this.currentSSFile.delete();
        this.reOpen();
    }

    private void reOpen() {
        Point location = this.getLocation();
        this.dispose();
        this.close();
        StandardManagerInit.openStandardManager().setLocation(location);
    }

    private void pressNewButton() {
        this.pressNewButton(null);
    }

    private void pressNewButton(SSFile copyFrom) {
        if (copyFrom == null) {
            copyFrom = this.currentSSFile;
            if (copyFrom == null) {
                throw new RuntimeException("Creation of new global file with no base!");
            }
        }

        String out = "";
        while (out.isEmpty()) {
            Object outObj = JOptionPane.showInputDialog(this, "Please enter a new global file name.", "Julti Standard Manager: New File", JOptionPane.PLAIN_MESSAGE, null, null, JultiOptions.getJultiOptions().getProfileName());
            if (outObj == null) {
                return;
            }
            out = outObj.toString().trim();
            if (!out.endsWith(".txt")) {
                out = out + ".txt";
            }

            if (new SSFile(out).exists()) {
                JOptionPane.showMessageDialog(this, "File with that name already exists! Please choose another or cancel.", "Julti Standard Manager: File Already Exists", JOptionPane.ERROR_MESSAGE);
                out = "";
                continue;
            }

            SSFile ssFile = copyFrom.copyToAndSave(out);
            this.fileSelectBox.addItem(ssFile);
            this.setSelectedFile(ssFile);
        }
    }

    private void close() {
        this.closed = true;
    }

    public boolean isClosed() {
        return this.closed;
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new GridLayoutManager(6, 1, new Insets(5, 5, 5, 5), -1, -1));
        fileSelectPanel = new JPanel();
        fileSelectPanel.setLayout(new GridLayoutManager(1, 4, new Insets(0, 0, 0, 0), -1, -1));
        mainPanel.add(fileSelectPanel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, 1, null, null, null, 0, false));
        fileSelectBox = new JComboBox();
        final DefaultComboBoxModel defaultComboBoxModel1 = new DefaultComboBoxModel();
        fileSelectBox.setModel(defaultComboBoxModel1);
        fileSelectBox.putClientProperty("html.disable", Boolean.FALSE);
        fileSelectPanel.add(fileSelectBox, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        newButton = new JButton();
        newButton.setText("New");
        fileSelectPanel.add(newButton, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, 1, 1, null, null, null, 0, false));
        deleteButton = new JButton();
        deleteButton.setText("Delete");
        fileSelectPanel.add(deleteButton, new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, 1, 1, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setText("File:");
        fileSelectPanel.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        bottomPanel = new JPanel();
        bottomPanel.setLayout(new GridLayoutManager(1, 4, new Insets(0, 0, 0, 0), -1, -1));
        mainPanel.add(bottomPanel, new GridConstraints(5, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        bottomPanel.add(spacer1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        applyButton = new JButton();
        applyButton.setEnabled(false);
        applyButton.setText("Already Applied to Instances");
        bottomPanel.add(applyButton, new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        editFileManuallyButton = new JButton();
        editFileManuallyButton.setText("Edit File Manually");
        bottomPanel.add(editFileManuallyButton, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        reloadFileButton = new JButton();
        reloadFileButton.setText("Reload File");
        bottomPanel.add(reloadFileButton, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("File Options");
        mainPanel.add(label2, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JSeparator separator1 = new JSeparator();
        separator1.setEnabled(true);
        mainPanel.add(separator1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final JSeparator separator2 = new JSeparator();
        separator2.setEnabled(true);
        mainPanel.add(separator2, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        editPanel = new JPanel();
        editPanel.setLayout(new GridBagLayout());
        mainPanel.add(editPanel, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_NORTH, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }

    private void createUIComponents() {
        // TODO: place custom component creation code here
    }
}
